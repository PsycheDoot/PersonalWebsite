
@{
    ViewBag.Title = "Character Scripting Tool";
}
<script src="https://cdn.rawgit.com/konvajs/konva/2.1.7/konva.min.js"></script>

<style>
    .draggable-box {
        position: absolute;
        z-index = 9;
        background-color: #f1f1f1;
        border: 1px solid #d3d3d3;
        text-align: center;
        width: 200px;
    }

        .draggable-box > .node-header {
            cursor: move;
        }

        .draggable-box > .arrow-drag-area {
            cursor: grab;
            cursor: -webkit-grab;
            cursor: -moz-grab;
            background-color: #d3d3d3;
            -webkit-touch-callout: none; /* iOS Safari */
            -webkit-user-select: none; /* Safari */
            -khtml-user-select: none; /* Konqueror HTML */
            -moz-user-select: none; /* Firefox */
            -ms-user-select: none; /* Internet Explorer/Edge */
            user-select: none;
        }

        .draggable-box > .dialogue-options {
        }

    .dialogue-options > .dialogue-option {
    }

    canvas {
        border: 1px solid #d3d3d3;
        background-color: #f1f1f1;
    }
</style>

<h2>Character Scripting Tool</h2>

<p>I prototyped this tool so I could get a better understanding of branching dialogue trees in videogames such as Deus Ex, Fallout, and Mass Effect.</p>

<div id="container"></div>

<button onclick="tree.addNode('Message')">Add Node</button>

<script onload="">
    function addNode(msg) {
        tree.addNode(msg);

    }

    function removeNode(id) {
        tree.DialogueNodes.splice(id, 1);
    }

    class DialogueTree {
        constructor() {
            this.Initialize();
        }

        Initialize() {
            this.SvgLines = [];
            this.DialogueNodes = {};
            this.CurrentDialogueID = 0;
            this.count = 0;
        }

        addNode(msg) {
            this.DialogueNodes[this.count] = new DialogueNode(this.count, msg);
            this.count++;
        }

        addDiagOption(startID, endID, msg) {
            var diagOpt = this.DialogueNodes[startID].addDialogueOption(endID, msg);
            var line = new LeaderLine(diagOpt.Element, document.getElementById("node" + endID));
            line.setOptions({ startSocket: 'auto', endSocket: 'auto' });
            line.path = 'auto';
            this.SvgLines.push(line);
        }

        addArrow(startID, endID, x1, y1, x2, y2) {
            var arrow = new SvgArrow(x1, y1, x2, y2);
            this.SvgLines.push(arrow);
            this.DialogueNodes[startID].OutgoingSvgArrows.push(arrow);
            this.DialogueNodes[endID].IncomingSvgArrows.push(arrow);
        }

    }

    class DialogueOption {
        constructor(text, transID) {
            this.Enabled = true;
            this.OptionText = text;
            this.TransitionID = transID;
            this.Element = null;
        }
    }

    class DialogueNode {
        constructor(id, msg) {
            // State keeping
            this.ID = id;
            this.Dialogue = msg;
            this.DialogueOptions = [];
            //this.IncomingSvgArrows = [];
            //this.OutgoingSvgArrows = [];

            this.box = new Konva.Rect({
                x: stage.getWidth() / 2 - 50,
                y: stage.getHeight() / 2 - 25,
                width: 100,
                height: 50,
                fill: '#00D2FF',
                stroke: 'black',
                strokeWidth: 1
            });

            this.header = new Konva.Text({
                fill: 'black'
            });

            this.nodeGroup = new Konva.Group({});

            this.box.on('mouseover', function () {
                document.body.style.cursor = 'pointer';
            });
            this.box.on('mouseout', function () {
                document.body.style.cursor = 'default';
            });

            layer.add(this.box);
            stage.add(layer);
        }

        addDialogueOption(transition, optionMsg) {
            // Create html element
            var itm = document.getElementById("template-dialogue-option");
            var cln = itm.cloneNode(true);
            cln.id = null;

            // Data bindings
            var dopt = new DialogueOption(optionMsg, transition)
            dopt.Element = cln;
            dopt.Enabled = ko.observable(true);
            dopt.OptionText = ko.observable(optionMsg);
            dopt.TransitionID = ko.observable(transition);
            ko.applyBindings(dopt, cln);

            document.getElementById("node" + this.ID).getElementsByClassName("dialogue-options")[0].appendChild(cln);
            updateDraggables();
            this.DialogueOptions.push(dopt);
            return dopt;
        }
    }

    var tree = new DialogueTree();
</script>
<script>
    // Konva Canvas stuff
    var width = window.innerWidth;
    var height = window.innerHeight;

    var stage = new Konva.Stage({
        container: 'container',
        width: width,
        height: height
    });

    var layer = new Konva.Layer();
    var rectX = stage.getWidth() / 2 - 50;
    var rectY = stage.getHeight() / 2 - 25;
</script>




<script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.2/knockout-min.js'></script>
<script src="~/Scripts/leader-line.min.js"></script>

